@page "/cliente"
@page "/cliente/{ClienteId:int}"

<PageTitle>Registro Cliente</PageTitle>

@inject ClienteBLL clienteBLL
@inject NotificationService notificationService

<AuthorizeView Context="Context">
    <Authorized>
<EditForm Model="cliente" OnValidSubmit="Guardar">
    <div class="card">
        <div class="card-header">
            <h1>Registro para Clientes</h1>
        </div>
        <div class="card-body">

            @*ClienteId*@
            <div class="row">
                <div class="col-3">
                    <label>Id: </label>
                    <input type="number" class="form-control" @bind-value="cliente.ClienteId">
                </div>
                <div class="col-3 d-flex align-items-end">
                    <button type="button" class="btn btn-primary" @onclick="Buscar">
                        <span class="oi oi-magnifying-glass"></span>
                    </button>
                </div>
            </div>

            <div class="row">
                <div class="col-6">
                    @*NombreCompleto*@
                    <label>Nombre: </label>
                    <InputText @bind-Value="cliente.NombreCompleto" class="form-control" />
                    <ValidationMessage For="@(() => cliente.NombreCompleto)" />
                </div>
                <div class="col-6">
                    @*Cedula*@
                    <label>Cédula: </label>
                    <InputText @bind-Value="cliente.Cedula" class="form-control" />
                    <ValidationMessage For="@(() => cliente.Cedula)" />
                </div>
            </div>

            <div class="row">
                <div class="col-6">
                    @*Ciudad*@
                    <label>Ciudad: </label>
                    <InputText @bind-Value="cliente.Ciudad" class="form-control" />
                    <ValidationMessage For="@(() => cliente.Ciudad)" />
                </div>
                <div class="col-6">
                    @*Direccion*@
                    <label>Dirección: </label>
                    <InputText @bind-Value="cliente.Direccion" class="form-control" />
                    <ValidationMessage For="@(() => cliente.Direccion)" />
                </div>
            </div>

            <div class="row">
                <div class="col-6">
                    @*Telefono*@
                    <label>Teléfono: </label>
                    <InputText @bind-Value="cliente.Telefono" class="form-control" />
                    <ValidationMessage For="@(() => cliente.Telefono)" />
                </div>
                <div class="col-6">
                    @*Email*@
                    <label>Email: </label>
                    <InputText @bind-Value="cliente.Email" class="form-control" />
                    <ValidationMessage For="@(() => cliente.Email)" />
                </div>
            </div>

            <div class="card-footer">
                <div class="form-group text-center" display: inline-block>
                    <button type="button" class="btn btn-lg btn-primary" @onclick="Nuevo"><i class="oi oi-file" /> Nuevo
                    </button>
                    <button type="submit" class="btn btn-lg btn-success"><i class="oi oi-document" /> Guardar </button>
                    <button type="button" class="btn btn-lg btn-danger" @onclick="Eliminar"><i class="oi oi-trash" />
                        Eliminar </button>
                </div>
            </div>
        </div>
    </div>
    <DataAnnotationsValidator />

</EditForm>
    </Authorized>
    <NotAuthorized>
        <div class="card">
            <div class="container-fluid">
                <div class="row justify-content-center">
                    <div class="col-md-6 text-center">
                        <h1 class="text">Inicio de sesión</h1>
                        <p>Para acceder a esta página, es necesario iniciar sesión..</p>
                        <a href="Identity/Account/Login"><button class="btn btn-primary">Iniciar sesión</button></a>
                    </div>
                </div>
            </div>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    [Parameter]
    public int ClienteId { get; set; }

    public Cliente cliente { get; set; } = new Cliente();

    protected override void OnInitialized()
    {
        if (ClienteId > 0)
        {
            this.cliente.ClienteId = ClienteId;
            this.Buscar();
        }
    }

    public void Nuevo()
    {
        cliente = new Cliente();
        ClienteId = 0;
    }

    bool Validar()
    {
        bool valido = true;

        if (String.IsNullOrEmpty(cliente.NombreCompleto))
        {
            valido = false;
        }

        if (cliente!.ClienteId < 0)
        {
            valido = false;
            ShowNotification(
            new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "El Id debe ser mayor a cero."
                }
            );
        }
        return valido;
    }


    void Guardar()
    {
        if (!Validar()) { return; }

        if (clienteBLL.Guardar(this.cliente))
        {
            ShowNotification(
            new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Se ha guardado con exito."
                }
            );
            this.Nuevo();
        }
    }

    private void Buscar()
    {
        if (cliente.ClienteId > 0)
        {
            var encontrado = clienteBLL.Buscar(cliente.ClienteId);
            if (encontrado != null)
            {
                ShowNotification(
                new NotificationMessage
                    {
                        Severity = NotificationSeverity.Info,
                        Summary = "Se ha ecnontrado con exito."
                    }
                );
                this.cliente = encontrado;
            }
            else
            {
                ShowNotification(
                new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = "Ingrese un valor existente."
                    }
                );
            }
        }
    }

    public void Eliminar()
    {
        if (clienteBLL.Eliminar(cliente.ClienteId))
        {
            ShowNotification(
            new NotificationMessage
                {
                    Severity = NotificationSeverity.Info,
                    Summary = "Se ha eliminado con exito."
                }
            );
            Nuevo();
        }
        else
        {
            ShowNotification(
            new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "No hay elementos para borrar."
                }
            );
            return;
        }
    }

    void ShowNotification(NotificationMessage message)
    {
        notificationService.Notify(message);
    }
}

