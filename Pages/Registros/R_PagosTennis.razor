@page "/pagosTennis"
@page "/pagosTennis/{PagoId:int}"

@inject PagosTennisBLL pagosTennisBLL
@inject ClienteBLL clienteBLL
@inject TennisBLL tennisBLL
@inject NotificationService notificationService

<EditForm Model="pagoTennis" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="card">
        <div class="card-header">
            <h1>Registro para pagos de tennis</h1>
        </div>

        <div class="card-body">
            @*PagoId*@
            <div class="form-group">
                <label>PagoId</label><br>
                <InputNumber @bind-Value="pagoTennis.PagoId" class="form-control" /> <br>
                <button type="button" class="btn btn-primary input-group-text" @onclick="Buscar">
                    <i class="oi oi-magnifying-glass" />Buscar</button>
            </div>

            @*ClienteId*@
            <div class="form-group">
                <label>ClienteId: </label><br>
                <InputSelect class="form-select" @bind-Value="pagoTennis.ClienteId">
                    @foreach (var item in clienteBLL.GetList(o => true))
                    {
                        <option value="@item.ClienteId">@item.NombreCompleto</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => pagoTennis.ClienteId)" />
            </div>

            @*TenniId*@
            <div class="form-group">
                <label>TenniId: </label><br>
                <InputSelect class="form-select" @bind-Value="pagoTennis.TenniId">
                    @foreach (var item in tennisBLL.GetList(o => true))
                    {
                        <option value="@item.TenniId">@item.Marca</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => pagoTennis.TenniId)" />
            </div>

            @*Concepto*@
            <div class="form-group">
                <label>Concepto: </label><br>
                <InputText @bind-Value="pagoTennis.Concepto" class="form-control" /> <br>
                <ValidationMessage For="@(() => pagoTennis.Concepto)" />
            </div>

            @*Fecha*@
            <div class="form-group">
                <label>Fecha: </label><br>
                <InputDate @bind-Value="pagoTennis.FechaPago" class="form-control" /> <br>
                <ValidationMessage For="@(() => pagoTennis.FechaPago)" />
            </div>
        <div class="card-footer">
            <div class="form-group text-center" display: inline-block>
                <button type="button" class="btn btn-lg btn-primary" @onclick="Nuevo"><i class="oi oi-file" /> Nuevo
                </button>
                <button type="submit" class="btn btn-lg btn-success"><i class="oi oi-document" /> Guardar </button>
                <button type="button" class="btn btn-lg btn-danger" @onclick="Eliminar"><i class="oi oi-trash" />
                    Eliminar </button>
            </div>
        </div>
    </div>
</div>

</EditForm>

@code {
    [Parameter]
    public int PagoId { get; set; }
    public PagosTennis pagoTennis { get; set; } = new PagosTennis();
    public DetallePagosTennis detalleTennis = new DetallePagosTennis();
    public Cliente cliente = new Cliente();

    protected override void OnInitialized()
    {
        if (PagoId > 0)
        {
            pagoTennis.PagoId = PagoId;
            Buscar();
        }
    }

    public void Nuevo()
    {
        pagoTennis = new PagosTennis();
    }

    bool Validar()
    {
        if (!String.IsNullOrEmpty(pagoTennis.Concepto))
        {
            return true;
        }
        return false;
    }


    void Guardar()
    {
        if (!Validar()) { return; }

        if (pagosTennisBLL.Guardar(this.pagoTennis))
        {
            ShowNotification(
            new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Se ha guardado con exito."
                }
            );
            this.Nuevo();
        }
    }

    private void Buscar()
    {
        if (pagoTennis.PagoId > 0)
        {
            var encontrado = pagosTennisBLL.Buscar(pagoTennis.PagoId);

            if (encontrado != null)
            {
                this.pagoTennis = encontrado;
            }
        }
    }

    public void Eliminar()
    {
        if (pagosTennisBLL.Eliminar(pagoTennis.PagoId))
        {
            ShowNotification(
            new NotificationMessage
                {
                    Severity = NotificationSeverity.Info,
                    Summary = "Se ha eliminado con exito."
                }
            );
            Nuevo();
        }
        else
        {
            ShowNotification(
            new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "No hay elemento para borrar."
                }
            );
            return;
        }
    }

    void AgregarDetalle()
    {
        pagoTennis.DetallePagosTennis.Add(this.detalleTennis);
        detalleTennis = new DetallePagosTennis();
        ShowNotification(
            new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Guardado Correctamente"
                });
    }

    void ShowNotification(NotificationMessage message)
    {
        notificationService.Notify(message);
    }

}