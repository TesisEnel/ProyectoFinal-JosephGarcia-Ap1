@page "/tenis"
@page "/tenis/{teniId:int}"

<PageTitle>Registro Tenis</PageTitle>

@inject TenisBLL tenisBLL
@inject NotificationService notificationService
<AuthorizeView Context="Context">
    <Authorized>
        <EditForm Model="teni" OnValidSubmit="Guardar">
            <DataAnnotationsValidator />

            <div class="card">
                <div class="card-header">
                    <h1> Registo de tenis </h1>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-3">
                            <label>Id: </label>
                            <input type="number" class="form-control" @bind-value="teni.TeniId">
                        </div>
                        <div class="col-3 d-flex align-items-end">
                            <button type="button" class="btn btn-primary" @onclick="Buscar">
                                <span class="oi oi-magnifying-glass"></span>
                            </button>
                        </div>
                    </div>
                    <div class="row">
                        @*Fecha*@
                        <div class="col-6">
                            <label>Fecha: </label>
                            <InputDate @bind-Value="teni.Fecha" class="form-control" />
                            <ValidationMessage For="@(() => teni.Fecha)" />
                        </div>
                    </div>
                    @*Marca*@
                    <div class="row">
                        <div class="col-6">
                            <label>Marca: </label>
                            <InputSelect class="form-select" @bind-Value="teni.Marca">
                                @if (ListaMarcas != null)
                                {
                                    if (string.IsNullOrEmpty(teni.Marca))
                                    {
                                        teni.Marca = ListaMarcas.FirstOrDefault();
                                    }
                                    @foreach (var item in ListaMarcas)
                                    {
                                        <option value="@item">@item</option>
                                    }
                                }
                            </InputSelect>
                            <ValidationMessage For="@(() => teni.Marca)" />
                        </div>
                        @*Descripcion*@
                        <div class="col-6">
                            <label>Descripción: </label>
                            <InputText @bind-Value="teni.Descripcion" class="form-control" />
                            <ValidationMessage For="@(() => teni.Descripcion)" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-6">
                            @*Precio*@
                            <label>Precio: </label>
                            <InputNumber @bind-Value="teni.Precio" class="form-control" />
                            <ValidationMessage For="@(() => teni.Precio)" />
                        </div>
                        <div class="col-6">
                            @*Costo*@
                            <label>Costo: </label>
                            <InputNumber @bind-Value="teni.Costo" class="form-control" />
                            <ValidationMessage For="@(() => teni.Costo)" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-6">
                            @*Color*@
                            <label>Color: </label>
                            <InputSelect class="form-select" @bind-Value="teni.Color">
                                @if (ListaColores != null)
                                {
                                    if (string.IsNullOrEmpty(teni.Color))
                                    {
                                        teni.Color = ListaColores.FirstOrDefault();
                                    }
                                    @foreach (var item in ListaColores)
                                    {
                                        <option value="@item">@item</option>
                                    }
                                }
                            </InputSelect>
                            <ValidationMessage For="@(() => teni.Color)" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-6">
                            @*Size*@
                            <label>Size: </label>
                            <InputSelect class="form-select" @bind-Value="teni.Size">
                                @if (ListaSizes != null)
                                {
                                    if (string.IsNullOrEmpty(teni.Size))
                                    {
                                        teni.Size = ListaSizes.FirstOrDefault();
                                    }
                                    @foreach (var item in ListaSizes)
                                    {
                                        <option value="@item">@item</option>
                                    }
                                }
                            </InputSelect>
                            <ValidationMessage For="@(() => teni.Size)" />
                        </div>
                        <div class="col-6">
                            @*Itbis*@
                            <label>Itbis: </label>
                            <InputNumber @bind-Value="teni.Itbis" class="form-control" />
                            <ValidationMessage For="@(() => teni.Itbis)" />
                        </div>
                    </div>
                </div>

                <div class="card-footer">
                    <div class="form-group text-center" display: inline-block>
                        <button type="button" class="btn btn-lg btn-primary" @onclick="Nuevo"><i class="oi oi-file" />
                            Nuevo
                        </button>
                        <button type="submit" class="btn btn-lg btn-success"><i class="oi oi-document" />
                            Guardar </button>
                        <button type="button" class="btn btn-lg btn-danger" @onclick="Eliminar"><i
                                class="oi oi-trash" />
                            Eliminar </button>
                    </div>
                </div>
            </div>
        </EditForm>
    </Authorized>
    <NotAuthorized>
        <div class="card">
            <div class="container-fluid">
                <div class="row justify-content-center">
                    <div class="col-md-6 text-center">
                        <h1 class="text">Inicio de sesión</h1>
                        <p>Para acceder a esta página, es necesario iniciar sesión..</p>
                        <a href="Identity/Account/Login"><button class="btn btn-primary">Iniciar sesión</button></a>
                    </div>
                </div>
            </div>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {

    [Parameter]
    public int teniId { get; set; }
    public Tenis teni { get; set; } = new Tenis();
    public List<string> ListaMarcas = new List<string> { "Nike", "Under Armour", "Jordan", "Adidas" };
    public List<string>? ListaColores = new List<string> { "Rojo", "Blanco", "Negro", "Azul" };
    public List<string>? ListaSizes = new List<string> { "6.0", "7.0", "8.0", "8.5", "9.0","9.5","10.0","10.5","11.0","12.0", "13.0", "14.0"};

    protected override void OnInitialized()
    {
        if (teniId > 0)
        {
            this.teni.TeniId = teniId;
            this.Buscar();
        }
    }

    public void Nuevo()
    {
        teni = new Tenis();
        teniId = 0;
    }

    bool Validar()
    {
        bool valido = true;
        if (String.IsNullOrEmpty(teni.Descripcion))
        {
            valido = false;
        }

        if (teni!.TeniId < 0)
        {
            valido = false;
            ShowNotification(
            new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "El Id debe ser mayor a cero."
                }
            );
        }

        return valido;
    }


    void Guardar()
    {
        if (!Validar()) { return; }

        if (teni.Precio < teni.Costo)
        {
            ShowNotification(
            new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "El costo no puede ser mayor que el precio."
                }
            );
            return;
        }

        if (tenisBLL.VerificarExistencia(this.teni) == false)
        {
            ShowNotification(
            new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Ya se ha añadido unos tenis con las mismas especificaciones de color, size y marca."
                }
            );
            return;
        }

        if (tenisBLL.Guardar(this.teni))
        {
            ShowNotification(
            new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Se ha guardado con exito."
                }
            );
            this.Nuevo();
        }
    }

    private void Buscar()
    {
        if (teni.TeniId > 0)
        {
            var encontrado = tenisBLL.Buscar(teni.TeniId);

            if (encontrado != null)
                this.teni = encontrado;
        }
    }

    public void Eliminar()
    {
        if (tenisBLL.Eliminar(teni.TeniId))
        {
            ShowNotification(
            new NotificationMessage
                {
                    Severity = NotificationSeverity.Info,
                    Summary = "Se ha eliminado con exito."
                }
            );
            Nuevo();
        }
        else
        {
            ShowNotification(
            new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "No hay elementos para borrar."
                }
            );
            return;
        }
    }

    void ShowNotification(NotificationMessage message)
    {
        notificationService.Notify(message);
    }
}


