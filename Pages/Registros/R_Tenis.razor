@page "/tenis"
@page "/tenis/{teniId:int}"

<PageTitle>Registro Tenis</PageTitle>

@inject TenisBLL tenisBLL
@inject MarcaBLL marcaBLL
@inject NotificationService notificationService

<EditForm Model="teni" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="card">
        <div class="card-header">
            <h1> Registo de tenis </h1>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-3">
                    <label>Id: </label>
                    <input type="number" class="form-control" @bind-value="teni.TeniId">
                </div>
                <div class="col-3 d-flex align-items-end">
                    <button type="button" class="btn btn-primary" @onclick="Buscar">
                        <span class="oi oi-magnifying-glass"></span>
                    </button>
                </div>
            </div>
            <div class="row">
                @*Fecha*@
                <div class="col-6">
                    <label>Fecha: </label>
                    <InputDate @bind-Value="teni.Fecha" class="form-control" />
                    <ValidationMessage For="@(() => teni.Fecha)" />
                </div>
            </div>
            @*Marca*@
            <div class="row">
                <div class="col-6">
                    <label>Marca: </label>
                    <InputSelect class="form-select" @bind-Value="teni.MarcaId">
                        @if (teni.MarcaId == 0)
                        {
                            teni.MarcaId = 1;
                        }
                        @foreach (Marca item in marcaBLL.GetList(o => true))
                        {
                            <option value="@item.MarcaId">@item.NombreMarca</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => teni.MarcaId)" />
                </div>
                @*Descripcion*@
                <div class="col-6">
                    <label>Descripción: </label>
                    <InputText @bind-Value="teni.Descripcion" class="form-control" />
                    <ValidationMessage For="@(() => teni.Descripcion)" />
                </div>
            </div>
            <div class="row">
                <div class="col-6">
                    @*Precio*@
                    <label>Precio: </label>
                    <InputNumber @bind-Value="teni.Precio" class="form-control" />
                    <ValidationMessage For="@(() => teni.Precio)" />
                </div>
                <div class="col-6">
                    @*Costo*@
                    <label>Costo: </label>
                    <InputNumber @bind-Value="teni.Costo" class="form-control" />
                    <ValidationMessage For="@(() => teni.Costo)" />
                </div>
            </div>
            <div class="row">
                <div class="col-6">
                    @*Color*@
                    <label>Color: </label>
                    <InputSelect class="form-select" @bind-Value="teni.Color">
                        @if (Colores != null)
                        {
                            if (string.IsNullOrEmpty(teni.Color))
                            {
                                teni.Color = Colores.FirstOrDefault();
                            }
                            @foreach (var item in Colores)
                            {
                                <option value="@item">@item</option>
                            }
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => teni.Color)" />
                </div>
            </div>
            <div class="row">
                <div class="col-6">
                    @*Size*@
                    <label>Size: </label>
                    <InputSelect class="form-select" @bind-Value="teni.Size">
                        @if (Sizes != null)
                        {
                            if (string.IsNullOrEmpty(teni.Size))
                            {
                                teni.Size = Sizes.FirstOrDefault();
                            }
                            @foreach (var item in Sizes)
                            {
                                <option value="@item">@item</option>
                            }
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => teni.Size)" />
                </div>
                <div class="col-6">
                    @*Itbis*@
                    <label>Itbis: </label>
                    <InputNumber @bind-Value="teni.Itbis" class="form-control" />
                    <ValidationMessage For="@(() => teni.Itbis)" />
                </div>
            </div>
        </div>

        <div class="card-footer">
            <div class="form-group text-center" display: inline-block>
                <button type="button" class="btn btn-lg btn-primary" @onclick="Nuevo"><i class="oi oi-file" /> Nuevo
                </button>
                <button type="submit" class="btn btn-lg btn-success"><i class="oi oi-document" />
                    Guardar </button>
                <button type="button" class="btn btn-lg btn-danger" @onclick="Eliminar"><i class="oi oi-trash" />
                    Eliminar </button>
            </div>
        </div>
    </div>
</EditForm>

@code {

    [Parameter]
    public int teniId { get; set; }
    public Tenis teni { get; set; } = new Tenis();
    public List<string>? Colores = new List<string> { "Rojo", "Blanco", "Negro", "Azul" };
    public List<string>? Sizes = new List<string> { "6.0", "7.0", "8.0", "8.5", "9.0" };

    protected override void OnInitialized()
    {
        if (teniId > 0)
        {
            this.teni.TeniId = teniId;
            this.Buscar();
        }
    }

    public void Nuevo()
    {
        teni = new Tenis();
    }

    bool Validar()
    {
        if (!String.IsNullOrEmpty(teni.Descripcion))
        {
            return true;
        }

        return false;
    }


    void Guardar()
    {
        if (!Validar()) { return; }

        if(tenisBLL.VerificarExistencia(this.teni) == false)
        {
            ShowNotification(
            new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Ya se ha añadido unos tenis con las mismas especificaciones de color, size y marca."
                }
            );
            return;
        }

        if (tenisBLL.Guardar(this.teni))
        {
            ShowNotification(
            new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Se ha guardado con exito."
                }
            );
            this.Nuevo();
        }
    }

    private void Buscar()
    {
        if (teni.TeniId > 0)
        {
            var encontrado = tenisBLL.Buscar(teni.TeniId);

            if (encontrado != null)
                this.teni = encontrado;
        }
    }

    public void Eliminar()
    {
        if (tenisBLL.Eliminar(teni.TeniId))
        {
            ShowNotification(
            new NotificationMessage
                {
                    Severity = NotificationSeverity.Info,
                    Summary = "Se ha eliminado con exito."
                }
            );
            Nuevo();
        }
        else
        {
            ShowNotification(
            new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "No hay elementos para borrar."
                }
            );
            return;
        }
    }

    void ShowNotification(NotificationMessage message)
    {
        notificationService.Notify(message);
    }
}


