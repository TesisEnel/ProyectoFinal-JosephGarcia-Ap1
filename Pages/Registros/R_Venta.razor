@page "/venta"
@page "/venta/{ventaId:int}"

<PageTitle>Venta</PageTitle>

@inject VentaBLL ventaBLL
@inject ClienteBLL clienteBLL
@inject TenisBLL tenisBLL
@inject NotificationService notificationService
<AuthorizeView Context="Context">
    <Authorized>
<EditForm Model="venta" OnInvalidSubmit="Guardar">
    <DataAnnotationsValidator />

    <div class="card">
        <div class="card-header">
            <h1> Registo de venta</h1>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-3">
                    <label>Id: </label>
                    <input type="number" class="form-control" @bind-value="venta.VentaId">
                </div>
                <div class="col-3 d-flex align-items-end">
                    <button type="button" class="btn btn-primary" @onclick="Buscar">
                        <span class="oi oi-magnifying-glass"></span>
                    </button>
                </div>
            </div>
            <div class="row">
                @*Fecha*@
                <div class="col-6">
                    <label>Fecha: </label>
                    <InputDate @bind-Value="venta.Fecha" class="form-control" />
                    <ValidationMessage For="@(() => venta.Fecha)" />
                </div>
            </div>
            @*Cliente*@
            <div class="row">
                <div class="col-6">
                    <label>Cliente: </label>
                    <InputSelect class="form-select" @bind-Value="venta.ClienteId">
                        @if (venta.ClienteId == 0)
                        {

                            venta.ClienteId = listaClientes.FirstOrDefault()?.ClienteId ?? 0;
                        }
                        @foreach (var clientes in listaClientes)
                        {
                            <option value="@clientes.ClienteId">@clientes.NombreCompleto</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => venta.ClienteId)" />
                </div>
                @*Concepto*@
                <div class="col-6">
                    <label>Concepto: </label>
                    <InputText @bind-Value="venta.Concepto" class="form-control" />
                    <ValidationMessage For="@(() => venta.Concepto)" />
                </div>
            </div>

            <br>

            @*Detalle*@
            <div class="card-header">
                <h1>Detalles de la venta</h1>
            </div>

            <div class="row">
                <div class="col-6">
                    @*TeniId*@
                    <label>Marca: </label>
                    <InputSelect class="form-select" @bind-Value="detalle.Marca">
                        <option value="" selected>Selecciona una marca</option>
                        @foreach (var marcas in tenisBLL.GetList(o => true).Select(t => t.Marca).Distinct().ToList())
                        {
                            <option value="@marcas">@marcas</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => detalle.Marca)" />
                </div>
                <div class="col-6">
                    @*cantidad*@
                    <label>Cantidad: </label>
                    <InputNumber @bind-Value="detalle.Cantidad" class="form-control" />
                    <ValidationMessage For="@(() => detalle.Cantidad)" />
                </div>
            </div>

            <div class="row">
                <div class="col-6">
                    @*Color*@
                    <label>Color: </label>
                    <InputSelect class="form-select" @bind-Value="detalle.Color">
                        <option value="" selected>Selecciona un color</option>
                        @foreach (var color in tenisBLL.GetList(o => o.Marca == detalle.Marca).Select(t =>
                        t.Color).Distinct().ToList())
                        {
                            <option value="@color">@color</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => detalle.Color)" />
                </div>
                <div class="col-3">
                    @*Size*@
                    <label>Size: </label>
                    <InputSelect class="form-select" @bind-Value="detalle.Size">
                        <option value="" selected>Selecciona un size</option>
                        @foreach (var size in tenisBLL.GetList(o => o.Marca == detalle.Marca && o.Color ==
                        detalle.Color).Select(t => t.Size).Distinct().ToList())
                        {
                            <option value="@size">@size</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => detalle.Size)" />
                </div>
                @*Boton*@
                <div class="col-3 d-flex align-items-end">
                    <button type="button" class="btn btn-success" @onclick="AgregarDetalle">
                        <i class="oi oi-plus"></i>
                    </button>
                </div>
            </div>

            @*Tabla*@
            <div class="container">
                <table class="table table-hover">
                    <thead class="thead-dark">
                        <tr>
                            <th>Marca</th>
                            <th>Color</th>
                            <th>Size</th>
                            <th>Cantidad</th>
                            <th>Precio</th>
                            <th>Itbis</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in venta.VentaDetalle)
                        {
                            <tr>
                                <td>@item.Marca</td>
                                <td>@item.Color</td>
                                <td>@item.Size</td>
                                <td>@item.Cantidad</td>
                                <td>@item.Precio</td>
                                <td>@item.Itbis</td>
                                <td> <button class="btn btn-danger mr-2" onclick=@(() => EliminarDetalle(item))>
                                        <i class="oi oi-trash"></i>
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            <label>Precio total(Itbis incluido): @total</label>
        </div>

        <div class="card-footer">
            <div class="form-group text-center" display: inline-block>
                <button type="button" class="btn btn-lg btn-primary" @onclick="Nuevo"><i class="oi oi-file" /> Nuevo
                </button>
                <button type="submit" class="btn btn-lg btn-success" @onclick="Guardar"><i class="oi oi-document" />
                    Guardar </button>
                <button type="button" class="btn btn-lg btn-danger" @onclick="Eliminar"><i class="oi oi-trash" />
                    Eliminar </button>
            </div>
        </div>
    </div>
</EditForm>
    </Authorized>
    <NotAuthorized>
        <div class="card">
            <div class="container-fluid">
                <div class="row justify-content-center">
                    <div class="col-md-6 text-center">
                        <h1 class="text">Inicio de sesi칩n</h1>
                        <p>Para acceder a esta p치gina, es necesario iniciar sesi칩n..</p>
                        <a href="Identity/Account/Login"><button class="btn btn-primary">Iniciar sesi칩n</button></a>
                    </div>
                </div>
            </div>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    [Parameter]
    public int VentaId { get; set; }
    public Venta venta { get; set; } = new Venta();
    public VentaDetalle detalle { get; set; } = new VentaDetalle();
    public List<Cliente> listaClientes = new List<Cliente>();
    public bool detalleGuardado = false;
    public double total = 0;

    protected override void OnInitialized()
    {
        if (VentaId > 0)
        {
            this.venta.VentaId = VentaId;
            this.Buscar();
        }

        listaClientes = clienteBLL.GetList(o => true);
    }

    public void Nuevo()
    {
        venta = new Venta();
        VentaId = 0;
    }

    bool Validar()
    {
        bool valido = true;
        if (String.IsNullOrEmpty(venta.Concepto))
        {
            return false;
        }

        if (venta!.VentaId < 0)
        {
            valido = false;
            ShowNotification(
            new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "El Id debe ser mayor a cero."
                }
            );
        }

        return valido;
    }


    void Guardar()
    {
        if (!Validar()) { return; }

        if (detalleGuardado == false)
        {
            ShowNotification(
            new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Es necesario que el concepto, el cliente y el detalle de la venta esten llenos correctamente."
                }
            );
            return;
        }


        if (ventaBLL.Guardar(this.venta) && detalleGuardado == true)
        {
            ShowNotification(
            new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Se ha guardado con exito."
                }
            );
            this.Nuevo();
        }
    }

    private void Buscar()
    {
        if (venta.VentaId > 0)
        {
            var encontrado = ventaBLL.Buscar(venta.VentaId);

            if (encontrado != null)
            {
                this.venta = encontrado;
            }
        }
    }

    public void Eliminar()
    {
        if (ventaBLL.Eliminar(venta))
        {
            ShowNotification(
            new NotificationMessage
                {
                    Severity = NotificationSeverity.Info,
                    Summary = "Se ha eliminado con exito."
                }
            );
            Nuevo();
        }
        else
        {
            ShowNotification(
            new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "No hay elementos para borrar."
                }
            );
            return;
        }
    }
    void AgregarDetalle()
    {
        Tenis tenisEncontrado = null;

        foreach (Tenis tenis in tenisBLL.GetList(o => true))
        {
            if (tenis.Marca == detalle.Marca &&
            tenis.Color == detalle.Color &&
            tenis.Size == detalle.Size)
            {
                tenisEncontrado = tenis;
                break;
            }
        }

        if (detalle.Cantidad > 0 && detalle?.Marca != null && detalle.Color != null && detalle.Size != null)
        {
            if (detalle.Cantidad <= tenisEncontrado!.Existencia)
            {
                detalle.Precio = tenisEncontrado.Precio;
                detalle.Itbis = tenisEncontrado.Itbis;
                venta.Ganancias += detalle.Precio * detalle.Cantidad;
                venta.Ganancias *= (1 + (detalle.Itbis / 100));
                total += venta.Ganancias;
                this.venta.VentaDetalle.Add(this.detalle);
                this.detalle = new VentaDetalle();
                detalleGuardado = true;
            }
            else
            {
                ShowNotification(
                new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = "La cantidad asignada es mayor a la existente."
                    }
                );
            }
        }
        else
        {
            ShowNotification(
            new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Faltan campos por llenar en el detalle."
                }
            );
        }

    }

    void EliminarDetalle(VentaDetalle detalle)
    {
        if (venta.VentaDetalle != null)
        {
            total -= venta.Ganancias;
            venta.VentaDetalle.Remove(detalle);
            ShowNotification(
            new NotificationMessage
                {
                    Severity = NotificationSeverity.Info,
                    Summary = "El detalle se ha eliminado correctamente"
                }
            );
        }
    }

    void ShowNotification(NotificationMessage message)
    {
        notificationService.Notify(message);
    }
}